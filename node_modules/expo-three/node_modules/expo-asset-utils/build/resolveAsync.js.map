{"version":3,"file":"resolveAsync.js","sourceRoot":"","sources":["../src/resolveAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAEnC,MAAM,kBAAkB,GAAG,MAAM,CAAC,EAAE,CAClC,MAAM,KAAK,IAAI;IACf,OAAO,MAAM,KAAK,QAAQ;IAC1B,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC;IAC1B,MAAM,CAAC,GAAG,KAAK,IAAI;IACnB,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,CAAC;AAEjC,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,aAAkB;IACnD,gBAAgB;IAChB,IAAI,kBAAkB,CAAC,aAAa,CAAC,EAAE;QACrC,OAAO,YAAY,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;KACxC;SAAM,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QAC5C,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAC9C,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;KAC5B;SAAM,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QAC5C,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC3C,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;KAC5B;IAED,iBAAiB;IACjB,IAAI,aAAa,YAAY,KAAK,EAAE;QAClC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC3B,IAAI;gBACF,MAAM,aAAa,CAAC,aAAa,EAAE,CAAC;aACrC;YAAC,OAAO,KAAK,EAAE;gBACd,sEAAsE;gBACtE,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;oBAC7C,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC;iBAC5C;qBAAM;oBACL,MAAM,KAAK,CAAC;iBACb;aACF;SACF;QACD,OAAO,aAAa,CAAC;KACtB;IACD,MAAM,IAAI,KAAK,CAAC,uCAAuC,aAAa,EAAE,CAAC,CAAC;AAC1E,CAAC","sourcesContent":["import { Asset } from 'expo-asset';\n\nconst isReactImageFormat = object =>\n  object !== null &&\n  typeof object === 'object' &&\n  !(object instanceof Asset) &&\n  object.uri !== null &&\n  typeof object.uri === 'string';\n\nexport async function resolveAsync(fileReference: any): Promise<Asset> {\n  // Reduce format\n  if (isReactImageFormat(fileReference)) {\n    return resolveAsync(fileReference.uri);\n  } else if (typeof fileReference === 'number') {\n    const asset = Asset.fromModule(fileReference);\n    return resolveAsync(asset);\n  } else if (typeof fileReference === 'string') {\n    const asset = Asset.fromURI(fileReference);\n    return resolveAsync(asset);\n  }\n\n  // Load asset URI\n  if (fileReference instanceof Asset) {\n    if (!fileReference.localUri) {\n      try {\n        await fileReference.downloadAsync();\n      } catch (error) {\n        // Handle weird Expo iOS error where remote URIs cannot be downloaded.\n        if (error.message.includes('unsupported URL')) {\n          fileReference.localUri = fileReference.uri;\n        } else {\n          throw error;\n        }\n      }\n    }\n    return fileReference;\n  }\n  throw new Error(`Cannot resolve asset automatically: ${fileReference}`);\n}\n"]}